/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  Department,
  DepartmentIEnumerableResult,
  DepartmentResult,
  FilterModel,
  Result
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1DepartmentOneIdHook = () => {
        const getApiV1DepartmentOneId = useCustomInstance<DepartmentResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1DepartmentOneId(
          {url: `/api/v1/Department/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1DepartmentOneId])
      }
    

export const getGetApiV1DepartmentOneIdQueryKey = (id: number,) => {
    return [`/api/v1/Department/one/${id}`] as const;
    }

    
export const useGetApiV1DepartmentOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DepartmentOneIdQueryKey(id);

  const getApiV1DepartmentOneId =  useGetApiV1DepartmentOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>> = ({ signal }) => getApiV1DepartmentOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1DepartmentOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>>
export type GetApiV1DepartmentOneIdInfiniteQueryError = unknown


export function useGetApiV1DepartmentOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1DepartmentOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1DepartmentOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1DepartmentOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1DepartmentOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1DepartmentOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DepartmentOneIdQueryKey(id);

  const getApiV1DepartmentOneId =  useGetApiV1DepartmentOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>> = ({ signal }) => getApiV1DepartmentOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1DepartmentOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>>
export type GetApiV1DepartmentOneIdQueryError = unknown


export function useGetApiV1DepartmentOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1DepartmentOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1DepartmentOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1DepartmentOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DepartmentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1DepartmentOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1DepartmentAllHook = () => {
        const postApiV1DepartmentAll = useCustomInstance<DepartmentIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1DepartmentAll(
          {url: `/api/v1/Department/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1DepartmentAll])
      }
    


export const usePostApiV1DepartmentAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1DepartmentAll =  usePostApiV1DepartmentAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1DepartmentAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1DepartmentAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentAllHook>>>>
    export type PostApiV1DepartmentAllMutationBody = FilterModel
    export type PostApiV1DepartmentAllMutationError = unknown

    export const usePostApiV1DepartmentAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1DepartmentAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1DepartmentCreateHook = () => {
        const postApiV1DepartmentCreate = useCustomInstance<Result>();

        return useCallback((
    department: Department,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1DepartmentCreate(
          {url: `/api/v1/Department/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: department
    },
          options);
        }, [postApiV1DepartmentCreate])
      }
    


export const usePostApiV1DepartmentCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentCreateHook>>>, TError,{data: Department}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentCreateHook>>>, TError,{data: Department}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1DepartmentCreate =  usePostApiV1DepartmentCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentCreateHook>>>, {data: Department}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1DepartmentCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1DepartmentCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentCreateHook>>>>
    export type PostApiV1DepartmentCreateMutationBody = Department
    export type PostApiV1DepartmentCreateMutationError = unknown

    export const usePostApiV1DepartmentCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentCreateHook>>>, TError,{data: Department}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentCreateHook>>>,
        TError,
        {data: Department},
        TContext
      > => {

      const mutationOptions = usePostApiV1DepartmentCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1DepartmentUpdateHook = () => {
        const postApiV1DepartmentUpdate = useCustomInstance<Result>();

        return useCallback((
    department: Department,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1DepartmentUpdate(
          {url: `/api/v1/Department/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: department
    },
          options);
        }, [postApiV1DepartmentUpdate])
      }
    


export const usePostApiV1DepartmentUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentUpdateHook>>>, TError,{data: Department}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentUpdateHook>>>, TError,{data: Department}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1DepartmentUpdate =  usePostApiV1DepartmentUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentUpdateHook>>>, {data: Department}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1DepartmentUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1DepartmentUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentUpdateHook>>>>
    export type PostApiV1DepartmentUpdateMutationBody = Department
    export type PostApiV1DepartmentUpdateMutationError = unknown

    export const usePostApiV1DepartmentUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentUpdateHook>>>, TError,{data: Department}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1DepartmentUpdateHook>>>,
        TError,
        {data: Department},
        TContext
      > => {

      const mutationOptions = usePostApiV1DepartmentUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    