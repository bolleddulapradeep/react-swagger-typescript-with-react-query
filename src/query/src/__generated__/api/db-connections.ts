/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  DbConnectionModel,
  DbConnectionModelIListResult,
  Result
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1DbconnectionAllHook = () => {
        const getApiV1DbconnectionAll = useCustomInstance<DbConnectionModelIListResult>();

        return useCallback((
    
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1DbconnectionAll(
          {url: `/api/v1/dbconnection/all`, method: 'GET', signal
    },
          options);
        }, [getApiV1DbconnectionAll])
      }
    

export const getGetApiV1DbconnectionAllQueryKey = () => {
    return [`/api/v1/dbconnection/all`] as const;
    }

    
export const useGetApiV1DbconnectionAllInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DbconnectionAllQueryKey();

  const getApiV1DbconnectionAll =  useGetApiV1DbconnectionAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>> = ({ signal }) => getApiV1DbconnectionAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1DbconnectionAllInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>>
export type GetApiV1DbconnectionAllInfiniteQueryError = unknown


export function useGetApiV1DbconnectionAllInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1DbconnectionAllInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1DbconnectionAllInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1DbconnectionAllInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1DbconnectionAllInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1DbconnectionAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DbconnectionAllQueryKey();

  const getApiV1DbconnectionAll =  useGetApiV1DbconnectionAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>> = ({ signal }) => getApiV1DbconnectionAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1DbconnectionAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>>
export type GetApiV1DbconnectionAllQueryError = unknown


export function useGetApiV1DbconnectionAll<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1DbconnectionAll<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1DbconnectionAll<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1DbconnectionAll<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionAllHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1DbconnectionAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1DbconnectionOneIdHook = () => {
        const getApiV1DbconnectionOneId = useCustomInstance<DbConnectionModelIListResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1DbconnectionOneId(
          {url: `/api/v1/dbconnection/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1DbconnectionOneId])
      }
    

export const getGetApiV1DbconnectionOneIdQueryKey = (id: number,) => {
    return [`/api/v1/dbconnection/one/${id}`] as const;
    }

    
export const useGetApiV1DbconnectionOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DbconnectionOneIdQueryKey(id);

  const getApiV1DbconnectionOneId =  useGetApiV1DbconnectionOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>> = ({ signal }) => getApiV1DbconnectionOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1DbconnectionOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>>
export type GetApiV1DbconnectionOneIdInfiniteQueryError = unknown


export function useGetApiV1DbconnectionOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1DbconnectionOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1DbconnectionOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1DbconnectionOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1DbconnectionOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1DbconnectionOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DbconnectionOneIdQueryKey(id);

  const getApiV1DbconnectionOneId =  useGetApiV1DbconnectionOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>> = ({ signal }) => getApiV1DbconnectionOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1DbconnectionOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>>
export type GetApiV1DbconnectionOneIdQueryError = unknown


export function useGetApiV1DbconnectionOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1DbconnectionOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1DbconnectionOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1DbconnectionOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1DbconnectionOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1DbconnectionOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1DbconnectionInsertHook = () => {
        const postApiV1DbconnectionInsert = useCustomInstance<Result>();

        return useCallback((
    dbConnectionModel: DbConnectionModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1DbconnectionInsert(
          {url: `/api/v1/dbconnection/insert`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbConnectionModel
    },
          options);
        }, [postApiV1DbconnectionInsert])
      }
    


export const usePostApiV1DbconnectionInsertMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DbconnectionInsertHook>>>, TError,{data: DbConnectionModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DbconnectionInsertHook>>>, TError,{data: DbConnectionModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1DbconnectionInsert =  usePostApiV1DbconnectionInsertHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1DbconnectionInsertHook>>>, {data: DbConnectionModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1DbconnectionInsert(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1DbconnectionInsertMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1DbconnectionInsertHook>>>>
    export type PostApiV1DbconnectionInsertMutationBody = DbConnectionModel
    export type PostApiV1DbconnectionInsertMutationError = unknown

    export const usePostApiV1DbconnectionInsert = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DbconnectionInsertHook>>>, TError,{data: DbConnectionModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1DbconnectionInsertHook>>>,
        TError,
        {data: DbConnectionModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1DbconnectionInsertMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1DbconnectionUpdateHook = () => {
        const postApiV1DbconnectionUpdate = useCustomInstance<Result>();

        return useCallback((
    dbConnectionModel: DbConnectionModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1DbconnectionUpdate(
          {url: `/api/v1/dbconnection/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbConnectionModel
    },
          options);
        }, [postApiV1DbconnectionUpdate])
      }
    


export const usePostApiV1DbconnectionUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DbconnectionUpdateHook>>>, TError,{data: DbConnectionModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DbconnectionUpdateHook>>>, TError,{data: DbConnectionModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1DbconnectionUpdate =  usePostApiV1DbconnectionUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1DbconnectionUpdateHook>>>, {data: DbConnectionModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1DbconnectionUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1DbconnectionUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1DbconnectionUpdateHook>>>>
    export type PostApiV1DbconnectionUpdateMutationBody = DbConnectionModel
    export type PostApiV1DbconnectionUpdateMutationError = unknown

    export const usePostApiV1DbconnectionUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1DbconnectionUpdateHook>>>, TError,{data: DbConnectionModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1DbconnectionUpdateHook>>>,
        TError,
        {data: DbConnectionModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1DbconnectionUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    