/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  Class,
  ClassIEnumerableResult,
  ClassResult,
  FilterModel,
  Result
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1ClassOneIdHook = () => {
        const getApiV1ClassOneId = useCustomInstance<ClassResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1ClassOneId(
          {url: `/api/v1/class/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1ClassOneId])
      }
    

export const getGetApiV1ClassOneIdQueryKey = (id: number,) => {
    return [`/api/v1/class/one/${id}`] as const;
    }

    
export const useGetApiV1ClassOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ClassOneIdQueryKey(id);

  const getApiV1ClassOneId =  useGetApiV1ClassOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>> = ({ signal }) => getApiV1ClassOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1ClassOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>>
export type GetApiV1ClassOneIdInfiniteQueryError = unknown


export function useGetApiV1ClassOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1ClassOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1ClassOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1ClassOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1ClassOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1ClassOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ClassOneIdQueryKey(id);

  const getApiV1ClassOneId =  useGetApiV1ClassOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>> = ({ signal }) => getApiV1ClassOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1ClassOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>>
export type GetApiV1ClassOneIdQueryError = unknown


export function useGetApiV1ClassOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1ClassOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1ClassOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1ClassOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ClassOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1ClassOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1ClassAllHook = () => {
        const postApiV1ClassAll = useCustomInstance<ClassIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1ClassAll(
          {url: `/api/v1/class/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1ClassAll])
      }
    


export const usePostApiV1ClassAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1ClassAll =  usePostApiV1ClassAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1ClassAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ClassAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassAllHook>>>>
    export type PostApiV1ClassAllMutationBody = FilterModel
    export type PostApiV1ClassAllMutationError = unknown

    export const usePostApiV1ClassAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1ClassAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1ClassCreateHook = () => {
        const postApiV1ClassCreate = useCustomInstance<Result>();

        return useCallback((
    _class: Class,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1ClassCreate(
          {url: `/api/v1/class/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: _class
    },
          options);
        }, [postApiV1ClassCreate])
      }
    


export const usePostApiV1ClassCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassCreateHook>>>, TError,{data: Class}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassCreateHook>>>, TError,{data: Class}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1ClassCreate =  usePostApiV1ClassCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassCreateHook>>>, {data: Class}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1ClassCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ClassCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassCreateHook>>>>
    export type PostApiV1ClassCreateMutationBody = Class
    export type PostApiV1ClassCreateMutationError = unknown

    export const usePostApiV1ClassCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassCreateHook>>>, TError,{data: Class}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassCreateHook>>>,
        TError,
        {data: Class},
        TContext
      > => {

      const mutationOptions = usePostApiV1ClassCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1ClassUpdateHook = () => {
        const postApiV1ClassUpdate = useCustomInstance<Result>();

        return useCallback((
    _class: Class,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1ClassUpdate(
          {url: `/api/v1/class/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: _class
    },
          options);
        }, [postApiV1ClassUpdate])
      }
    


export const usePostApiV1ClassUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassUpdateHook>>>, TError,{data: Class}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassUpdateHook>>>, TError,{data: Class}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1ClassUpdate =  usePostApiV1ClassUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassUpdateHook>>>, {data: Class}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1ClassUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ClassUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassUpdateHook>>>>
    export type PostApiV1ClassUpdateMutationBody = Class
    export type PostApiV1ClassUpdateMutationError = unknown

    export const usePostApiV1ClassUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassUpdateHook>>>, TError,{data: Class}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1ClassUpdateHook>>>,
        TError,
        {data: Class},
        TContext
      > => {

      const mutationOptions = usePostApiV1ClassUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    