/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  FilterModel,
  Parent,
  ParentIEnumerableResult,
  ParentResult,
  Result
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1ParentOneIdHook = () => {
        const getApiV1ParentOneId = useCustomInstance<ParentResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1ParentOneId(
          {url: `/api/v1/parent/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1ParentOneId])
      }
    

export const getGetApiV1ParentOneIdQueryKey = (id: number,) => {
    return [`/api/v1/parent/one/${id}`] as const;
    }

    
export const useGetApiV1ParentOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ParentOneIdQueryKey(id);

  const getApiV1ParentOneId =  useGetApiV1ParentOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>> = ({ signal }) => getApiV1ParentOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1ParentOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>>
export type GetApiV1ParentOneIdInfiniteQueryError = unknown


export function useGetApiV1ParentOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1ParentOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1ParentOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1ParentOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1ParentOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1ParentOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ParentOneIdQueryKey(id);

  const getApiV1ParentOneId =  useGetApiV1ParentOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>> = ({ signal }) => getApiV1ParentOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1ParentOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>>
export type GetApiV1ParentOneIdQueryError = unknown


export function useGetApiV1ParentOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1ParentOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1ParentOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1ParentOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ParentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1ParentOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1ParentAllHook = () => {
        const postApiV1ParentAll = useCustomInstance<ParentIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1ParentAll(
          {url: `/api/v1/parent/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1ParentAll])
      }
    


export const usePostApiV1ParentAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1ParentAll =  usePostApiV1ParentAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1ParentAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ParentAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentAllHook>>>>
    export type PostApiV1ParentAllMutationBody = FilterModel
    export type PostApiV1ParentAllMutationError = unknown

    export const usePostApiV1ParentAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1ParentAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1ParentCreateHook = () => {
        const postApiV1ParentCreate = useCustomInstance<Result>();

        return useCallback((
    parent: Parent,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1ParentCreate(
          {url: `/api/v1/parent/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: parent
    },
          options);
        }, [postApiV1ParentCreate])
      }
    


export const usePostApiV1ParentCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentCreateHook>>>, TError,{data: Parent}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentCreateHook>>>, TError,{data: Parent}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1ParentCreate =  usePostApiV1ParentCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentCreateHook>>>, {data: Parent}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1ParentCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ParentCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentCreateHook>>>>
    export type PostApiV1ParentCreateMutationBody = Parent
    export type PostApiV1ParentCreateMutationError = unknown

    export const usePostApiV1ParentCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentCreateHook>>>, TError,{data: Parent}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentCreateHook>>>,
        TError,
        {data: Parent},
        TContext
      > => {

      const mutationOptions = usePostApiV1ParentCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1ParentUpdateHook = () => {
        const postApiV1ParentUpdate = useCustomInstance<Result>();

        return useCallback((
    parent: Parent,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1ParentUpdate(
          {url: `/api/v1/parent/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: parent
    },
          options);
        }, [postApiV1ParentUpdate])
      }
    


export const usePostApiV1ParentUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentUpdateHook>>>, TError,{data: Parent}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentUpdateHook>>>, TError,{data: Parent}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1ParentUpdate =  usePostApiV1ParentUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentUpdateHook>>>, {data: Parent}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1ParentUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ParentUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentUpdateHook>>>>
    export type PostApiV1ParentUpdateMutationBody = Parent
    export type PostApiV1ParentUpdateMutationError = unknown

    export const usePostApiV1ParentUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentUpdateHook>>>, TError,{data: Parent}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1ParentUpdateHook>>>,
        TError,
        {data: Parent},
        TContext
      > => {

      const mutationOptions = usePostApiV1ParentUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    