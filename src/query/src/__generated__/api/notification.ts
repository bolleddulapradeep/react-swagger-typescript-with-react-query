/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  FilterModel,
  Notification,
  NotificationIEnumerableResult,
  NotificationResult,
  Result
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1NotificationOneIdHook = () => {
        const getApiV1NotificationOneId = useCustomInstance<NotificationResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1NotificationOneId(
          {url: `/api/v1/notification/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1NotificationOneId])
      }
    

export const getGetApiV1NotificationOneIdQueryKey = (id: number,) => {
    return [`/api/v1/notification/one/${id}`] as const;
    }

    
export const useGetApiV1NotificationOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1NotificationOneIdQueryKey(id);

  const getApiV1NotificationOneId =  useGetApiV1NotificationOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>> = ({ signal }) => getApiV1NotificationOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1NotificationOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>>
export type GetApiV1NotificationOneIdInfiniteQueryError = unknown


export function useGetApiV1NotificationOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1NotificationOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1NotificationOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1NotificationOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1NotificationOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1NotificationOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1NotificationOneIdQueryKey(id);

  const getApiV1NotificationOneId =  useGetApiV1NotificationOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>> = ({ signal }) => getApiV1NotificationOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1NotificationOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>>
export type GetApiV1NotificationOneIdQueryError = unknown


export function useGetApiV1NotificationOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1NotificationOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1NotificationOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1NotificationOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1NotificationOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1NotificationOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1NotificationAllHook = () => {
        const postApiV1NotificationAll = useCustomInstance<NotificationIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1NotificationAll(
          {url: `/api/v1/notification/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1NotificationAll])
      }
    


export const usePostApiV1NotificationAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1NotificationAll =  usePostApiV1NotificationAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1NotificationAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1NotificationAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationAllHook>>>>
    export type PostApiV1NotificationAllMutationBody = FilterModel
    export type PostApiV1NotificationAllMutationError = unknown

    export const usePostApiV1NotificationAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1NotificationAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1NotificationCreateHook = () => {
        const postApiV1NotificationCreate = useCustomInstance<Result>();

        return useCallback((
    notification: Notification,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1NotificationCreate(
          {url: `/api/v1/notification/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: notification
    },
          options);
        }, [postApiV1NotificationCreate])
      }
    


export const usePostApiV1NotificationCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationCreateHook>>>, TError,{data: Notification}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationCreateHook>>>, TError,{data: Notification}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1NotificationCreate =  usePostApiV1NotificationCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationCreateHook>>>, {data: Notification}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1NotificationCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1NotificationCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationCreateHook>>>>
    export type PostApiV1NotificationCreateMutationBody = Notification
    export type PostApiV1NotificationCreateMutationError = unknown

    export const usePostApiV1NotificationCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationCreateHook>>>, TError,{data: Notification}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationCreateHook>>>,
        TError,
        {data: Notification},
        TContext
      > => {

      const mutationOptions = usePostApiV1NotificationCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1NotificationUpdateHook = () => {
        const postApiV1NotificationUpdate = useCustomInstance<Result>();

        return useCallback((
    notification: Notification,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1NotificationUpdate(
          {url: `/api/v1/notification/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: notification
    },
          options);
        }, [postApiV1NotificationUpdate])
      }
    


export const usePostApiV1NotificationUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationUpdateHook>>>, TError,{data: Notification}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationUpdateHook>>>, TError,{data: Notification}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1NotificationUpdate =  usePostApiV1NotificationUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationUpdateHook>>>, {data: Notification}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1NotificationUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1NotificationUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationUpdateHook>>>>
    export type PostApiV1NotificationUpdateMutationBody = Notification
    export type PostApiV1NotificationUpdateMutationError = unknown

    export const usePostApiV1NotificationUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationUpdateHook>>>, TError,{data: Notification}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1NotificationUpdateHook>>>,
        TError,
        {data: Notification},
        TContext
      > => {

      const mutationOptions = usePostApiV1NotificationUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    