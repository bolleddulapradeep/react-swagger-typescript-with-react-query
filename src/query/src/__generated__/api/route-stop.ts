/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  FilterModel,
  Result,
  RouteStop,
  RouteStopIEnumerableResult,
  RouteStopResult
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1RouteStopOneIdHook = () => {
        const getApiV1RouteStopOneId = useCustomInstance<RouteStopResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1RouteStopOneId(
          {url: `/api/v1/RouteStop/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1RouteStopOneId])
      }
    

export const getGetApiV1RouteStopOneIdQueryKey = (id: number,) => {
    return [`/api/v1/RouteStop/one/${id}`] as const;
    }

    
export const useGetApiV1RouteStopOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RouteStopOneIdQueryKey(id);

  const getApiV1RouteStopOneId =  useGetApiV1RouteStopOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>> = ({ signal }) => getApiV1RouteStopOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1RouteStopOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>>
export type GetApiV1RouteStopOneIdInfiniteQueryError = unknown


export function useGetApiV1RouteStopOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1RouteStopOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1RouteStopOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1RouteStopOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1RouteStopOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1RouteStopOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RouteStopOneIdQueryKey(id);

  const getApiV1RouteStopOneId =  useGetApiV1RouteStopOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>> = ({ signal }) => getApiV1RouteStopOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1RouteStopOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>>
export type GetApiV1RouteStopOneIdQueryError = unknown


export function useGetApiV1RouteStopOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1RouteStopOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1RouteStopOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1RouteStopOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteStopOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1RouteStopOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1RouteStopAllHook = () => {
        const postApiV1RouteStopAll = useCustomInstance<RouteStopIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1RouteStopAll(
          {url: `/api/v1/RouteStop/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1RouteStopAll])
      }
    


export const usePostApiV1RouteStopAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1RouteStopAll =  usePostApiV1RouteStopAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1RouteStopAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1RouteStopAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopAllHook>>>>
    export type PostApiV1RouteStopAllMutationBody = FilterModel
    export type PostApiV1RouteStopAllMutationError = unknown

    export const usePostApiV1RouteStopAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1RouteStopAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1RouteStopCreateHook = () => {
        const postApiV1RouteStopCreate = useCustomInstance<Result>();

        return useCallback((
    routeStop: RouteStop,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1RouteStopCreate(
          {url: `/api/v1/RouteStop/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: routeStop
    },
          options);
        }, [postApiV1RouteStopCreate])
      }
    


export const usePostApiV1RouteStopCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopCreateHook>>>, TError,{data: RouteStop}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopCreateHook>>>, TError,{data: RouteStop}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1RouteStopCreate =  usePostApiV1RouteStopCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopCreateHook>>>, {data: RouteStop}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1RouteStopCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1RouteStopCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopCreateHook>>>>
    export type PostApiV1RouteStopCreateMutationBody = RouteStop
    export type PostApiV1RouteStopCreateMutationError = unknown

    export const usePostApiV1RouteStopCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopCreateHook>>>, TError,{data: RouteStop}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopCreateHook>>>,
        TError,
        {data: RouteStop},
        TContext
      > => {

      const mutationOptions = usePostApiV1RouteStopCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1RouteStopUpdateHook = () => {
        const postApiV1RouteStopUpdate = useCustomInstance<Result>();

        return useCallback((
    routeStop: RouteStop,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1RouteStopUpdate(
          {url: `/api/v1/RouteStop/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: routeStop
    },
          options);
        }, [postApiV1RouteStopUpdate])
      }
    


export const usePostApiV1RouteStopUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopUpdateHook>>>, TError,{data: RouteStop}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopUpdateHook>>>, TError,{data: RouteStop}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1RouteStopUpdate =  usePostApiV1RouteStopUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopUpdateHook>>>, {data: RouteStop}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1RouteStopUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1RouteStopUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopUpdateHook>>>>
    export type PostApiV1RouteStopUpdateMutationBody = RouteStop
    export type PostApiV1RouteStopUpdateMutationError = unknown

    export const usePostApiV1RouteStopUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopUpdateHook>>>, TError,{data: RouteStop}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteStopUpdateHook>>>,
        TError,
        {data: RouteStop},
        TContext
      > => {

      const mutationOptions = usePostApiV1RouteStopUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    