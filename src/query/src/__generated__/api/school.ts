/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  FilterModel,
  Result,
  School,
  SchoolIEnumerableResult,
  SchoolResult
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1SchoolOneIdHook = () => {
        const getApiV1SchoolOneId = useCustomInstance<SchoolResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1SchoolOneId(
          {url: `/api/v1/school/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1SchoolOneId])
      }
    

export const getGetApiV1SchoolOneIdQueryKey = (id: number,) => {
    return [`/api/v1/school/one/${id}`] as const;
    }

    
export const useGetApiV1SchoolOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SchoolOneIdQueryKey(id);

  const getApiV1SchoolOneId =  useGetApiV1SchoolOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>> = ({ signal }) => getApiV1SchoolOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SchoolOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>>
export type GetApiV1SchoolOneIdInfiniteQueryError = unknown


export function useGetApiV1SchoolOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SchoolOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SchoolOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1SchoolOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1SchoolOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1SchoolOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SchoolOneIdQueryKey(id);

  const getApiV1SchoolOneId =  useGetApiV1SchoolOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>> = ({ signal }) => getApiV1SchoolOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SchoolOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>>
export type GetApiV1SchoolOneIdQueryError = unknown


export function useGetApiV1SchoolOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SchoolOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SchoolOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1SchoolOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1SchoolOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1SchoolAllHook = () => {
        const postApiV1SchoolAll = useCustomInstance<SchoolIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1SchoolAll(
          {url: `/api/v1/school/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1SchoolAll])
      }
    


export const usePostApiV1SchoolAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1SchoolAll =  usePostApiV1SchoolAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1SchoolAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SchoolAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolAllHook>>>>
    export type PostApiV1SchoolAllMutationBody = FilterModel
    export type PostApiV1SchoolAllMutationError = unknown

    export const usePostApiV1SchoolAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1SchoolAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1SchoolCreateHook = () => {
        const postApiV1SchoolCreate = useCustomInstance<Result>();

        return useCallback((
    school: School,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1SchoolCreate(
          {url: `/api/v1/school/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: school
    },
          options);
        }, [postApiV1SchoolCreate])
      }
    


export const usePostApiV1SchoolCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolCreateHook>>>, TError,{data: School}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolCreateHook>>>, TError,{data: School}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1SchoolCreate =  usePostApiV1SchoolCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolCreateHook>>>, {data: School}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1SchoolCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SchoolCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolCreateHook>>>>
    export type PostApiV1SchoolCreateMutationBody = School
    export type PostApiV1SchoolCreateMutationError = unknown

    export const usePostApiV1SchoolCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolCreateHook>>>, TError,{data: School}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolCreateHook>>>,
        TError,
        {data: School},
        TContext
      > => {

      const mutationOptions = usePostApiV1SchoolCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1SchoolUpdateHook = () => {
        const postApiV1SchoolUpdate = useCustomInstance<Result>();

        return useCallback((
    school: School,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1SchoolUpdate(
          {url: `/api/v1/school/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: school
    },
          options);
        }, [postApiV1SchoolUpdate])
      }
    


export const usePostApiV1SchoolUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolUpdateHook>>>, TError,{data: School}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolUpdateHook>>>, TError,{data: School}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1SchoolUpdate =  usePostApiV1SchoolUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolUpdateHook>>>, {data: School}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1SchoolUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SchoolUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolUpdateHook>>>>
    export type PostApiV1SchoolUpdateMutationBody = School
    export type PostApiV1SchoolUpdateMutationError = unknown

    export const usePostApiV1SchoolUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolUpdateHook>>>, TError,{data: School}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolUpdateHook>>>,
        TError,
        {data: School},
        TContext
      > => {

      const mutationOptions = usePostApiV1SchoolUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    