/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  FilterModel,
  Result,
  Route,
  RouteIEnumerableResult,
  RouteResult
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1RouteOneIdHook = () => {
        const getApiV1RouteOneId = useCustomInstance<RouteResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1RouteOneId(
          {url: `/api/v1/Route/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1RouteOneId])
      }
    

export const getGetApiV1RouteOneIdQueryKey = (id: number,) => {
    return [`/api/v1/Route/one/${id}`] as const;
    }

    
export const useGetApiV1RouteOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RouteOneIdQueryKey(id);

  const getApiV1RouteOneId =  useGetApiV1RouteOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>> = ({ signal }) => getApiV1RouteOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1RouteOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>>
export type GetApiV1RouteOneIdInfiniteQueryError = unknown


export function useGetApiV1RouteOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1RouteOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1RouteOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1RouteOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1RouteOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1RouteOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RouteOneIdQueryKey(id);

  const getApiV1RouteOneId =  useGetApiV1RouteOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>> = ({ signal }) => getApiV1RouteOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1RouteOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>>
export type GetApiV1RouteOneIdQueryError = unknown


export function useGetApiV1RouteOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1RouteOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1RouteOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1RouteOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RouteOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1RouteOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1RouteAllHook = () => {
        const postApiV1RouteAll = useCustomInstance<RouteIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1RouteAll(
          {url: `/api/v1/Route/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1RouteAll])
      }
    


export const usePostApiV1RouteAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1RouteAll =  usePostApiV1RouteAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1RouteAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1RouteAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteAllHook>>>>
    export type PostApiV1RouteAllMutationBody = FilterModel
    export type PostApiV1RouteAllMutationError = unknown

    export const usePostApiV1RouteAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1RouteAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1RouteCreateHook = () => {
        const postApiV1RouteCreate = useCustomInstance<Result>();

        return useCallback((
    route: Route,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1RouteCreate(
          {url: `/api/v1/Route/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: route
    },
          options);
        }, [postApiV1RouteCreate])
      }
    


export const usePostApiV1RouteCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteCreateHook>>>, TError,{data: Route}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteCreateHook>>>, TError,{data: Route}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1RouteCreate =  usePostApiV1RouteCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteCreateHook>>>, {data: Route}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1RouteCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1RouteCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteCreateHook>>>>
    export type PostApiV1RouteCreateMutationBody = Route
    export type PostApiV1RouteCreateMutationError = unknown

    export const usePostApiV1RouteCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteCreateHook>>>, TError,{data: Route}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteCreateHook>>>,
        TError,
        {data: Route},
        TContext
      > => {

      const mutationOptions = usePostApiV1RouteCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1RouteUpdateHook = () => {
        const postApiV1RouteUpdate = useCustomInstance<Result>();

        return useCallback((
    route: Route,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1RouteUpdate(
          {url: `/api/v1/Route/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: route
    },
          options);
        }, [postApiV1RouteUpdate])
      }
    


export const usePostApiV1RouteUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteUpdateHook>>>, TError,{data: Route}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteUpdateHook>>>, TError,{data: Route}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1RouteUpdate =  usePostApiV1RouteUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteUpdateHook>>>, {data: Route}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1RouteUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1RouteUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteUpdateHook>>>>
    export type PostApiV1RouteUpdateMutationBody = Route
    export type PostApiV1RouteUpdateMutationError = unknown

    export const usePostApiV1RouteUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteUpdateHook>>>, TError,{data: Route}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1RouteUpdateHook>>>,
        TError,
        {data: Route},
        TContext
      > => {

      const mutationOptions = usePostApiV1RouteUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    