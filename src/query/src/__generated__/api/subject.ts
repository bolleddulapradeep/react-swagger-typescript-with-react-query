/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  FilterModel,
  Result,
  Subject,
  SubjectIEnumerableResult,
  SubjectResult
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1SubjectOneIdHook = () => {
        const getApiV1SubjectOneId = useCustomInstance<SubjectResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1SubjectOneId(
          {url: `/api/v1/Subject/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1SubjectOneId])
      }
    

export const getGetApiV1SubjectOneIdQueryKey = (id: number,) => {
    return [`/api/v1/Subject/one/${id}`] as const;
    }

    
export const useGetApiV1SubjectOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SubjectOneIdQueryKey(id);

  const getApiV1SubjectOneId =  useGetApiV1SubjectOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>> = ({ signal }) => getApiV1SubjectOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SubjectOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>>
export type GetApiV1SubjectOneIdInfiniteQueryError = unknown


export function useGetApiV1SubjectOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SubjectOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SubjectOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1SubjectOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1SubjectOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1SubjectOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SubjectOneIdQueryKey(id);

  const getApiV1SubjectOneId =  useGetApiV1SubjectOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>> = ({ signal }) => getApiV1SubjectOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SubjectOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>>
export type GetApiV1SubjectOneIdQueryError = unknown


export function useGetApiV1SubjectOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SubjectOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SubjectOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1SubjectOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SubjectOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1SubjectOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1SubjectAllHook = () => {
        const postApiV1SubjectAll = useCustomInstance<SubjectIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1SubjectAll(
          {url: `/api/v1/Subject/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1SubjectAll])
      }
    


export const usePostApiV1SubjectAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1SubjectAll =  usePostApiV1SubjectAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1SubjectAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SubjectAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectAllHook>>>>
    export type PostApiV1SubjectAllMutationBody = FilterModel
    export type PostApiV1SubjectAllMutationError = unknown

    export const usePostApiV1SubjectAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1SubjectAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1SubjectCreateHook = () => {
        const postApiV1SubjectCreate = useCustomInstance<Result>();

        return useCallback((
    subject: Subject,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1SubjectCreate(
          {url: `/api/v1/Subject/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: subject
    },
          options);
        }, [postApiV1SubjectCreate])
      }
    


export const usePostApiV1SubjectCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectCreateHook>>>, TError,{data: Subject}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectCreateHook>>>, TError,{data: Subject}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1SubjectCreate =  usePostApiV1SubjectCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectCreateHook>>>, {data: Subject}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1SubjectCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SubjectCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectCreateHook>>>>
    export type PostApiV1SubjectCreateMutationBody = Subject
    export type PostApiV1SubjectCreateMutationError = unknown

    export const usePostApiV1SubjectCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectCreateHook>>>, TError,{data: Subject}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectCreateHook>>>,
        TError,
        {data: Subject},
        TContext
      > => {

      const mutationOptions = usePostApiV1SubjectCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1SubjectUpdateHook = () => {
        const postApiV1SubjectUpdate = useCustomInstance<Result>();

        return useCallback((
    subject: Subject,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1SubjectUpdate(
          {url: `/api/v1/Subject/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: subject
    },
          options);
        }, [postApiV1SubjectUpdate])
      }
    


export const usePostApiV1SubjectUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectUpdateHook>>>, TError,{data: Subject}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectUpdateHook>>>, TError,{data: Subject}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1SubjectUpdate =  usePostApiV1SubjectUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectUpdateHook>>>, {data: Subject}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1SubjectUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SubjectUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectUpdateHook>>>>
    export type PostApiV1SubjectUpdateMutationBody = Subject
    export type PostApiV1SubjectUpdateMutationError = unknown

    export const usePostApiV1SubjectUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectUpdateHook>>>, TError,{data: Subject}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1SubjectUpdateHook>>>,
        TError,
        {data: Subject},
        TContext
      > => {

      const mutationOptions = usePostApiV1SubjectUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    