/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  FilterModel,
  Result,
  Section,
  SectionIEnumerableResult,
  SectionResult
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1SectionOneIdHook = () => {
        const getApiV1SectionOneId = useCustomInstance<SectionResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1SectionOneId(
          {url: `/api/v1/section/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1SectionOneId])
      }
    

export const getGetApiV1SectionOneIdQueryKey = (id: number,) => {
    return [`/api/v1/section/one/${id}`] as const;
    }

    
export const useGetApiV1SectionOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SectionOneIdQueryKey(id);

  const getApiV1SectionOneId =  useGetApiV1SectionOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>> = ({ signal }) => getApiV1SectionOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SectionOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>>
export type GetApiV1SectionOneIdInfiniteQueryError = unknown


export function useGetApiV1SectionOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SectionOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SectionOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1SectionOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1SectionOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1SectionOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SectionOneIdQueryKey(id);

  const getApiV1SectionOneId =  useGetApiV1SectionOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>> = ({ signal }) => getApiV1SectionOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SectionOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>>
export type GetApiV1SectionOneIdQueryError = unknown


export function useGetApiV1SectionOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SectionOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SectionOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1SectionOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SectionOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1SectionOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1SectionAllHook = () => {
        const postApiV1SectionAll = useCustomInstance<SectionIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1SectionAll(
          {url: `/api/v1/section/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1SectionAll])
      }
    


export const usePostApiV1SectionAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1SectionAll =  usePostApiV1SectionAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1SectionAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SectionAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionAllHook>>>>
    export type PostApiV1SectionAllMutationBody = FilterModel
    export type PostApiV1SectionAllMutationError = unknown

    export const usePostApiV1SectionAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1SectionAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1SectionCreateHook = () => {
        const postApiV1SectionCreate = useCustomInstance<Result>();

        return useCallback((
    section: Section,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1SectionCreate(
          {url: `/api/v1/section/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: section
    },
          options);
        }, [postApiV1SectionCreate])
      }
    


export const usePostApiV1SectionCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionCreateHook>>>, TError,{data: Section}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionCreateHook>>>, TError,{data: Section}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1SectionCreate =  usePostApiV1SectionCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionCreateHook>>>, {data: Section}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1SectionCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SectionCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionCreateHook>>>>
    export type PostApiV1SectionCreateMutationBody = Section
    export type PostApiV1SectionCreateMutationError = unknown

    export const usePostApiV1SectionCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionCreateHook>>>, TError,{data: Section}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionCreateHook>>>,
        TError,
        {data: Section},
        TContext
      > => {

      const mutationOptions = usePostApiV1SectionCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1SectionUpdateHook = () => {
        const postApiV1SectionUpdate = useCustomInstance<Result>();

        return useCallback((
    section: Section,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1SectionUpdate(
          {url: `/api/v1/section/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: section
    },
          options);
        }, [postApiV1SectionUpdate])
      }
    


export const usePostApiV1SectionUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionUpdateHook>>>, TError,{data: Section}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionUpdateHook>>>, TError,{data: Section}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1SectionUpdate =  usePostApiV1SectionUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionUpdateHook>>>, {data: Section}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1SectionUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SectionUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionUpdateHook>>>>
    export type PostApiV1SectionUpdateMutationBody = Section
    export type PostApiV1SectionUpdateMutationError = unknown

    export const usePostApiV1SectionUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionUpdateHook>>>, TError,{data: Section}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1SectionUpdateHook>>>,
        TError,
        {data: Section},
        TContext
      > => {

      const mutationOptions = usePostApiV1SectionUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    