/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  ExamType,
  ExamTypeIEnumerableResult,
  ExamTypeResult,
  FilterModel,
  Result
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1ExamtypeOneIdHook = () => {
        const getApiV1ExamtypeOneId = useCustomInstance<ExamTypeResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1ExamtypeOneId(
          {url: `/api/v1/examtype/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1ExamtypeOneId])
      }
    

export const getGetApiV1ExamtypeOneIdQueryKey = (id: number,) => {
    return [`/api/v1/examtype/one/${id}`] as const;
    }

    
export const useGetApiV1ExamtypeOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ExamtypeOneIdQueryKey(id);

  const getApiV1ExamtypeOneId =  useGetApiV1ExamtypeOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>> = ({ signal }) => getApiV1ExamtypeOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1ExamtypeOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>>
export type GetApiV1ExamtypeOneIdInfiniteQueryError = unknown


export function useGetApiV1ExamtypeOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1ExamtypeOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1ExamtypeOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1ExamtypeOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1ExamtypeOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1ExamtypeOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ExamtypeOneIdQueryKey(id);

  const getApiV1ExamtypeOneId =  useGetApiV1ExamtypeOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>> = ({ signal }) => getApiV1ExamtypeOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1ExamtypeOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>>
export type GetApiV1ExamtypeOneIdQueryError = unknown


export function useGetApiV1ExamtypeOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1ExamtypeOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1ExamtypeOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1ExamtypeOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1ExamtypeOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1ExamtypeOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1ExamtypeAllHook = () => {
        const postApiV1ExamtypeAll = useCustomInstance<ExamTypeIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1ExamtypeAll(
          {url: `/api/v1/examtype/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1ExamtypeAll])
      }
    


export const usePostApiV1ExamtypeAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1ExamtypeAll =  usePostApiV1ExamtypeAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1ExamtypeAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ExamtypeAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeAllHook>>>>
    export type PostApiV1ExamtypeAllMutationBody = FilterModel
    export type PostApiV1ExamtypeAllMutationError = unknown

    export const usePostApiV1ExamtypeAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1ExamtypeAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1ExamtypeCreateHook = () => {
        const postApiV1ExamtypeCreate = useCustomInstance<Result>();

        return useCallback((
    examType: ExamType,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1ExamtypeCreate(
          {url: `/api/v1/examtype/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: examType
    },
          options);
        }, [postApiV1ExamtypeCreate])
      }
    


export const usePostApiV1ExamtypeCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeCreateHook>>>, TError,{data: ExamType}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeCreateHook>>>, TError,{data: ExamType}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1ExamtypeCreate =  usePostApiV1ExamtypeCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeCreateHook>>>, {data: ExamType}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1ExamtypeCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ExamtypeCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeCreateHook>>>>
    export type PostApiV1ExamtypeCreateMutationBody = ExamType
    export type PostApiV1ExamtypeCreateMutationError = unknown

    export const usePostApiV1ExamtypeCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeCreateHook>>>, TError,{data: ExamType}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeCreateHook>>>,
        TError,
        {data: ExamType},
        TContext
      > => {

      const mutationOptions = usePostApiV1ExamtypeCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1ExamtypeUpdateHook = () => {
        const postApiV1ExamtypeUpdate = useCustomInstance<Result>();

        return useCallback((
    examType: ExamType,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1ExamtypeUpdate(
          {url: `/api/v1/examtype/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: examType
    },
          options);
        }, [postApiV1ExamtypeUpdate])
      }
    


export const usePostApiV1ExamtypeUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeUpdateHook>>>, TError,{data: ExamType}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeUpdateHook>>>, TError,{data: ExamType}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1ExamtypeUpdate =  usePostApiV1ExamtypeUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeUpdateHook>>>, {data: ExamType}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1ExamtypeUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ExamtypeUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeUpdateHook>>>>
    export type PostApiV1ExamtypeUpdateMutationBody = ExamType
    export type PostApiV1ExamtypeUpdateMutationError = unknown

    export const usePostApiV1ExamtypeUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeUpdateHook>>>, TError,{data: ExamType}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1ExamtypeUpdateHook>>>,
        TError,
        {data: ExamType},
        TContext
      > => {

      const mutationOptions = usePostApiV1ExamtypeUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    