/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  FilterModel,
  Result,
  Role,
  RoleIEnumerableResult,
  RoleResult
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1RoleOneIdHook = () => {
        const getApiV1RoleOneId = useCustomInstance<RoleResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1RoleOneId(
          {url: `/api/v1/Role/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1RoleOneId])
      }
    

export const getGetApiV1RoleOneIdQueryKey = (id: number,) => {
    return [`/api/v1/Role/one/${id}`] as const;
    }

    
export const useGetApiV1RoleOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RoleOneIdQueryKey(id);

  const getApiV1RoleOneId =  useGetApiV1RoleOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>> = ({ signal }) => getApiV1RoleOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1RoleOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>>
export type GetApiV1RoleOneIdInfiniteQueryError = unknown


export function useGetApiV1RoleOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1RoleOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1RoleOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1RoleOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1RoleOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1RoleOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RoleOneIdQueryKey(id);

  const getApiV1RoleOneId =  useGetApiV1RoleOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>> = ({ signal }) => getApiV1RoleOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1RoleOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>>
export type GetApiV1RoleOneIdQueryError = unknown


export function useGetApiV1RoleOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1RoleOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1RoleOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1RoleOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1RoleOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1RoleOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1RoleAllHook = () => {
        const postApiV1RoleAll = useCustomInstance<RoleIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1RoleAll(
          {url: `/api/v1/Role/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1RoleAll])
      }
    


export const usePostApiV1RoleAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1RoleAll =  usePostApiV1RoleAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1RoleAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1RoleAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleAllHook>>>>
    export type PostApiV1RoleAllMutationBody = FilterModel
    export type PostApiV1RoleAllMutationError = unknown

    export const usePostApiV1RoleAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1RoleAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1RoleCreateHook = () => {
        const postApiV1RoleCreate = useCustomInstance<Result>();

        return useCallback((
    role: Role,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1RoleCreate(
          {url: `/api/v1/Role/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: role
    },
          options);
        }, [postApiV1RoleCreate])
      }
    


export const usePostApiV1RoleCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleCreateHook>>>, TError,{data: Role}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleCreateHook>>>, TError,{data: Role}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1RoleCreate =  usePostApiV1RoleCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleCreateHook>>>, {data: Role}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1RoleCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1RoleCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleCreateHook>>>>
    export type PostApiV1RoleCreateMutationBody = Role
    export type PostApiV1RoleCreateMutationError = unknown

    export const usePostApiV1RoleCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleCreateHook>>>, TError,{data: Role}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleCreateHook>>>,
        TError,
        {data: Role},
        TContext
      > => {

      const mutationOptions = usePostApiV1RoleCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1RoleUpdateHook = () => {
        const postApiV1RoleUpdate = useCustomInstance<Result>();

        return useCallback((
    role: Role,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1RoleUpdate(
          {url: `/api/v1/Role/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: role
    },
          options);
        }, [postApiV1RoleUpdate])
      }
    


export const usePostApiV1RoleUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleUpdateHook>>>, TError,{data: Role}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleUpdateHook>>>, TError,{data: Role}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1RoleUpdate =  usePostApiV1RoleUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleUpdateHook>>>, {data: Role}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1RoleUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1RoleUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleUpdateHook>>>>
    export type PostApiV1RoleUpdateMutationBody = Role
    export type PostApiV1RoleUpdateMutationError = unknown

    export const usePostApiV1RoleUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleUpdateHook>>>, TError,{data: Role}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1RoleUpdateHook>>>,
        TError,
        {data: Role},
        TContext
      > => {

      const mutationOptions = usePostApiV1RoleUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    