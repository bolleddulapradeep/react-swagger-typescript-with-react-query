/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  FilterModel,
  Result,
  SchoolDetail,
  SchoolDetailIEnumerableResult,
  SchoolDetailResult
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1SchoolDetailOneIdHook = () => {
        const getApiV1SchoolDetailOneId = useCustomInstance<SchoolDetailResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1SchoolDetailOneId(
          {url: `/api/v1/SchoolDetail/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1SchoolDetailOneId])
      }
    

export const getGetApiV1SchoolDetailOneIdQueryKey = (id: number,) => {
    return [`/api/v1/SchoolDetail/one/${id}`] as const;
    }

    
export const useGetApiV1SchoolDetailOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SchoolDetailOneIdQueryKey(id);

  const getApiV1SchoolDetailOneId =  useGetApiV1SchoolDetailOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>> = ({ signal }) => getApiV1SchoolDetailOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SchoolDetailOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>>
export type GetApiV1SchoolDetailOneIdInfiniteQueryError = unknown


export function useGetApiV1SchoolDetailOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SchoolDetailOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SchoolDetailOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1SchoolDetailOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1SchoolDetailOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1SchoolDetailOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SchoolDetailOneIdQueryKey(id);

  const getApiV1SchoolDetailOneId =  useGetApiV1SchoolDetailOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>> = ({ signal }) => getApiV1SchoolDetailOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SchoolDetailOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>>
export type GetApiV1SchoolDetailOneIdQueryError = unknown


export function useGetApiV1SchoolDetailOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SchoolDetailOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1SchoolDetailOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1SchoolDetailOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1SchoolDetailOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1SchoolDetailOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1SchoolDetailAllHook = () => {
        const postApiV1SchoolDetailAll = useCustomInstance<SchoolDetailIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1SchoolDetailAll(
          {url: `/api/v1/SchoolDetail/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1SchoolDetailAll])
      }
    


export const usePostApiV1SchoolDetailAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1SchoolDetailAll =  usePostApiV1SchoolDetailAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1SchoolDetailAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SchoolDetailAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailAllHook>>>>
    export type PostApiV1SchoolDetailAllMutationBody = FilterModel
    export type PostApiV1SchoolDetailAllMutationError = unknown

    export const usePostApiV1SchoolDetailAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1SchoolDetailAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1SchoolDetailCreateHook = () => {
        const postApiV1SchoolDetailCreate = useCustomInstance<Result>();

        return useCallback((
    schoolDetail: SchoolDetail,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1SchoolDetailCreate(
          {url: `/api/v1/SchoolDetail/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: schoolDetail
    },
          options);
        }, [postApiV1SchoolDetailCreate])
      }
    


export const usePostApiV1SchoolDetailCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailCreateHook>>>, TError,{data: SchoolDetail}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailCreateHook>>>, TError,{data: SchoolDetail}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1SchoolDetailCreate =  usePostApiV1SchoolDetailCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailCreateHook>>>, {data: SchoolDetail}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1SchoolDetailCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SchoolDetailCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailCreateHook>>>>
    export type PostApiV1SchoolDetailCreateMutationBody = SchoolDetail
    export type PostApiV1SchoolDetailCreateMutationError = unknown

    export const usePostApiV1SchoolDetailCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailCreateHook>>>, TError,{data: SchoolDetail}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailCreateHook>>>,
        TError,
        {data: SchoolDetail},
        TContext
      > => {

      const mutationOptions = usePostApiV1SchoolDetailCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1SchoolDetailUpdateHook = () => {
        const postApiV1SchoolDetailUpdate = useCustomInstance<Result>();

        return useCallback((
    schoolDetail: SchoolDetail,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1SchoolDetailUpdate(
          {url: `/api/v1/SchoolDetail/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: schoolDetail
    },
          options);
        }, [postApiV1SchoolDetailUpdate])
      }
    


export const usePostApiV1SchoolDetailUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailUpdateHook>>>, TError,{data: SchoolDetail}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailUpdateHook>>>, TError,{data: SchoolDetail}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1SchoolDetailUpdate =  usePostApiV1SchoolDetailUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailUpdateHook>>>, {data: SchoolDetail}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1SchoolDetailUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SchoolDetailUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailUpdateHook>>>>
    export type PostApiV1SchoolDetailUpdateMutationBody = SchoolDetail
    export type PostApiV1SchoolDetailUpdateMutationError = unknown

    export const usePostApiV1SchoolDetailUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailUpdateHook>>>, TError,{data: SchoolDetail}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1SchoolDetailUpdateHook>>>,
        TError,
        {data: SchoolDetail},
        TContext
      > => {

      const mutationOptions = usePostApiV1SchoolDetailUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    