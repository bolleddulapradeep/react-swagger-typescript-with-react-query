/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  FilterModel,
  MessageType,
  MessageTypeIEnumerableResult,
  MessageTypeResult,
  Result
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1MessagetypeOneIdHook = () => {
        const getApiV1MessagetypeOneId = useCustomInstance<MessageTypeResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1MessagetypeOneId(
          {url: `/api/v1/messagetype/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1MessagetypeOneId])
      }
    

export const getGetApiV1MessagetypeOneIdQueryKey = (id: number,) => {
    return [`/api/v1/messagetype/one/${id}`] as const;
    }

    
export const useGetApiV1MessagetypeOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MessagetypeOneIdQueryKey(id);

  const getApiV1MessagetypeOneId =  useGetApiV1MessagetypeOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>> = ({ signal }) => getApiV1MessagetypeOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1MessagetypeOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>>
export type GetApiV1MessagetypeOneIdInfiniteQueryError = unknown


export function useGetApiV1MessagetypeOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1MessagetypeOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1MessagetypeOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1MessagetypeOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1MessagetypeOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1MessagetypeOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MessagetypeOneIdQueryKey(id);

  const getApiV1MessagetypeOneId =  useGetApiV1MessagetypeOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>> = ({ signal }) => getApiV1MessagetypeOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1MessagetypeOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>>
export type GetApiV1MessagetypeOneIdQueryError = unknown


export function useGetApiV1MessagetypeOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1MessagetypeOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1MessagetypeOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1MessagetypeOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessagetypeOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1MessagetypeOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1MessagetypeAllHook = () => {
        const postApiV1MessagetypeAll = useCustomInstance<MessageTypeIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1MessagetypeAll(
          {url: `/api/v1/messagetype/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1MessagetypeAll])
      }
    


export const usePostApiV1MessagetypeAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1MessagetypeAll =  usePostApiV1MessagetypeAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1MessagetypeAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1MessagetypeAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeAllHook>>>>
    export type PostApiV1MessagetypeAllMutationBody = FilterModel
    export type PostApiV1MessagetypeAllMutationError = unknown

    export const usePostApiV1MessagetypeAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1MessagetypeAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1MessagetypeCreateHook = () => {
        const postApiV1MessagetypeCreate = useCustomInstance<Result>();

        return useCallback((
    messageType: MessageType,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1MessagetypeCreate(
          {url: `/api/v1/messagetype/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: messageType
    },
          options);
        }, [postApiV1MessagetypeCreate])
      }
    


export const usePostApiV1MessagetypeCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeCreateHook>>>, TError,{data: MessageType}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeCreateHook>>>, TError,{data: MessageType}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1MessagetypeCreate =  usePostApiV1MessagetypeCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeCreateHook>>>, {data: MessageType}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1MessagetypeCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1MessagetypeCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeCreateHook>>>>
    export type PostApiV1MessagetypeCreateMutationBody = MessageType
    export type PostApiV1MessagetypeCreateMutationError = unknown

    export const usePostApiV1MessagetypeCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeCreateHook>>>, TError,{data: MessageType}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeCreateHook>>>,
        TError,
        {data: MessageType},
        TContext
      > => {

      const mutationOptions = usePostApiV1MessagetypeCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1MessagetypeUpdateHook = () => {
        const postApiV1MessagetypeUpdate = useCustomInstance<Result>();

        return useCallback((
    messageType: MessageType,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1MessagetypeUpdate(
          {url: `/api/v1/messagetype/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: messageType
    },
          options);
        }, [postApiV1MessagetypeUpdate])
      }
    


export const usePostApiV1MessagetypeUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeUpdateHook>>>, TError,{data: MessageType}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeUpdateHook>>>, TError,{data: MessageType}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1MessagetypeUpdate =  usePostApiV1MessagetypeUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeUpdateHook>>>, {data: MessageType}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1MessagetypeUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1MessagetypeUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeUpdateHook>>>>
    export type PostApiV1MessagetypeUpdateMutationBody = MessageType
    export type PostApiV1MessagetypeUpdateMutationError = unknown

    export const usePostApiV1MessagetypeUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeUpdateHook>>>, TError,{data: MessageType}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1MessagetypeUpdateHook>>>,
        TError,
        {data: MessageType},
        TContext
      > => {

      const mutationOptions = usePostApiV1MessagetypeUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    