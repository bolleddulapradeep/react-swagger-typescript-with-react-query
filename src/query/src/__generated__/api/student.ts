/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  FilterModel,
  Result,
  Student,
  StudentIEnumerableResult,
  StudentResult
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1StudentOneIdHook = () => {
        const getApiV1StudentOneId = useCustomInstance<StudentResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1StudentOneId(
          {url: `/api/v1/student/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1StudentOneId])
      }
    

export const getGetApiV1StudentOneIdQueryKey = (id: number,) => {
    return [`/api/v1/student/one/${id}`] as const;
    }

    
export const useGetApiV1StudentOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1StudentOneIdQueryKey(id);

  const getApiV1StudentOneId =  useGetApiV1StudentOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>> = ({ signal }) => getApiV1StudentOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1StudentOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>>
export type GetApiV1StudentOneIdInfiniteQueryError = unknown


export function useGetApiV1StudentOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1StudentOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1StudentOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1StudentOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1StudentOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1StudentOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1StudentOneIdQueryKey(id);

  const getApiV1StudentOneId =  useGetApiV1StudentOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>> = ({ signal }) => getApiV1StudentOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1StudentOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>>
export type GetApiV1StudentOneIdQueryError = unknown


export function useGetApiV1StudentOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1StudentOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1StudentOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1StudentOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1StudentOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1StudentOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1StudentAllHook = () => {
        const postApiV1StudentAll = useCustomInstance<StudentIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1StudentAll(
          {url: `/api/v1/student/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1StudentAll])
      }
    


export const usePostApiV1StudentAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1StudentAll =  usePostApiV1StudentAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1StudentAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1StudentAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentAllHook>>>>
    export type PostApiV1StudentAllMutationBody = FilterModel
    export type PostApiV1StudentAllMutationError = unknown

    export const usePostApiV1StudentAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1StudentAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1StudentCreateHook = () => {
        const postApiV1StudentCreate = useCustomInstance<Result>();

        return useCallback((
    student: Student,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1StudentCreate(
          {url: `/api/v1/student/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: student
    },
          options);
        }, [postApiV1StudentCreate])
      }
    


export const usePostApiV1StudentCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentCreateHook>>>, TError,{data: Student}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentCreateHook>>>, TError,{data: Student}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1StudentCreate =  usePostApiV1StudentCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentCreateHook>>>, {data: Student}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1StudentCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1StudentCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentCreateHook>>>>
    export type PostApiV1StudentCreateMutationBody = Student
    export type PostApiV1StudentCreateMutationError = unknown

    export const usePostApiV1StudentCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentCreateHook>>>, TError,{data: Student}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentCreateHook>>>,
        TError,
        {data: Student},
        TContext
      > => {

      const mutationOptions = usePostApiV1StudentCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1StudentUpdateHook = () => {
        const postApiV1StudentUpdate = useCustomInstance<Result>();

        return useCallback((
    student: Student,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1StudentUpdate(
          {url: `/api/v1/student/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: student
    },
          options);
        }, [postApiV1StudentUpdate])
      }
    


export const usePostApiV1StudentUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentUpdateHook>>>, TError,{data: Student}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentUpdateHook>>>, TError,{data: Student}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1StudentUpdate =  usePostApiV1StudentUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentUpdateHook>>>, {data: Student}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1StudentUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1StudentUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentUpdateHook>>>>
    export type PostApiV1StudentUpdateMutationBody = Student
    export type PostApiV1StudentUpdateMutationError = unknown

    export const usePostApiV1StudentUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentUpdateHook>>>, TError,{data: Student}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1StudentUpdateHook>>>,
        TError,
        {data: Student},
        TContext
      > => {

      const mutationOptions = usePostApiV1StudentUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    