/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  FilterModel,
  Result,
  Vehicle,
  VehicleIEnumerableResult,
  VehicleResult
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1VehicleOneIdHook = () => {
        const getApiV1VehicleOneId = useCustomInstance<VehicleResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1VehicleOneId(
          {url: `/api/v1/Vehicle/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1VehicleOneId])
      }
    

export const getGetApiV1VehicleOneIdQueryKey = (id: number,) => {
    return [`/api/v1/Vehicle/one/${id}`] as const;
    }

    
export const useGetApiV1VehicleOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1VehicleOneIdQueryKey(id);

  const getApiV1VehicleOneId =  useGetApiV1VehicleOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>> = ({ signal }) => getApiV1VehicleOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1VehicleOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>>
export type GetApiV1VehicleOneIdInfiniteQueryError = unknown


export function useGetApiV1VehicleOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1VehicleOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1VehicleOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1VehicleOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1VehicleOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1VehicleOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1VehicleOneIdQueryKey(id);

  const getApiV1VehicleOneId =  useGetApiV1VehicleOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>> = ({ signal }) => getApiV1VehicleOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1VehicleOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>>
export type GetApiV1VehicleOneIdQueryError = unknown


export function useGetApiV1VehicleOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1VehicleOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1VehicleOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1VehicleOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1VehicleOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1VehicleOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1VehicleAllHook = () => {
        const postApiV1VehicleAll = useCustomInstance<VehicleIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1VehicleAll(
          {url: `/api/v1/Vehicle/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1VehicleAll])
      }
    


export const usePostApiV1VehicleAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1VehicleAll =  usePostApiV1VehicleAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1VehicleAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1VehicleAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleAllHook>>>>
    export type PostApiV1VehicleAllMutationBody = FilterModel
    export type PostApiV1VehicleAllMutationError = unknown

    export const usePostApiV1VehicleAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1VehicleAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1VehicleCreateHook = () => {
        const postApiV1VehicleCreate = useCustomInstance<Result>();

        return useCallback((
    vehicle: Vehicle,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1VehicleCreate(
          {url: `/api/v1/Vehicle/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vehicle
    },
          options);
        }, [postApiV1VehicleCreate])
      }
    


export const usePostApiV1VehicleCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleCreateHook>>>, TError,{data: Vehicle}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleCreateHook>>>, TError,{data: Vehicle}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1VehicleCreate =  usePostApiV1VehicleCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleCreateHook>>>, {data: Vehicle}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1VehicleCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1VehicleCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleCreateHook>>>>
    export type PostApiV1VehicleCreateMutationBody = Vehicle
    export type PostApiV1VehicleCreateMutationError = unknown

    export const usePostApiV1VehicleCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleCreateHook>>>, TError,{data: Vehicle}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleCreateHook>>>,
        TError,
        {data: Vehicle},
        TContext
      > => {

      const mutationOptions = usePostApiV1VehicleCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1VehicleUpdateHook = () => {
        const postApiV1VehicleUpdate = useCustomInstance<Result>();

        return useCallback((
    vehicle: Vehicle,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1VehicleUpdate(
          {url: `/api/v1/Vehicle/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vehicle
    },
          options);
        }, [postApiV1VehicleUpdate])
      }
    


export const usePostApiV1VehicleUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleUpdateHook>>>, TError,{data: Vehicle}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleUpdateHook>>>, TError,{data: Vehicle}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1VehicleUpdate =  usePostApiV1VehicleUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleUpdateHook>>>, {data: Vehicle}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1VehicleUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1VehicleUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleUpdateHook>>>>
    export type PostApiV1VehicleUpdateMutationBody = Vehicle
    export type PostApiV1VehicleUpdateMutationError = unknown

    export const usePostApiV1VehicleUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleUpdateHook>>>, TError,{data: Vehicle}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1VehicleUpdateHook>>>,
        TError,
        {data: Vehicle},
        TContext
      > => {

      const mutationOptions = usePostApiV1VehicleUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    