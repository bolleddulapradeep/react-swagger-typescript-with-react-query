/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * SMA.Api
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  FilterModel,
  MessageTemplate,
  MessageTemplateIEnumerableResult,
  MessageTemplateResult,
  Result
} from './api.schemas'
import { useCustomInstance } from '../../custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const useGetApiV1MessageTemplateOneIdHook = () => {
        const getApiV1MessageTemplateOneId = useCustomInstance<MessageTemplateResult>();

        return useCallback((
    id: number,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,signal?: AbortSignal
) => {
        return getApiV1MessageTemplateOneId(
          {url: `/api/v1/MessageTemplate/one/${id}`, method: 'GET', signal
    },
          options);
        }, [getApiV1MessageTemplateOneId])
      }
    

export const getGetApiV1MessageTemplateOneIdQueryKey = (id: number,) => {
    return [`/api/v1/MessageTemplate/one/${id}`] as const;
    }

    
export const useGetApiV1MessageTemplateOneIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MessageTemplateOneIdQueryKey(id);

  const getApiV1MessageTemplateOneId =  useGetApiV1MessageTemplateOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>> = ({ signal }) => getApiV1MessageTemplateOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1MessageTemplateOneIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>>
export type GetApiV1MessageTemplateOneIdInfiniteQueryError = unknown


export function useGetApiV1MessageTemplateOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1MessageTemplateOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1MessageTemplateOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1MessageTemplateOneIdInfinite<TData = InfiniteData<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1MessageTemplateOneIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiV1MessageTemplateOneIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MessageTemplateOneIdQueryKey(id);

  const getApiV1MessageTemplateOneId =  useGetApiV1MessageTemplateOneIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>> = ({ signal }) => getApiV1MessageTemplateOneId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1MessageTemplateOneIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>>
export type GetApiV1MessageTemplateOneIdQueryError = unknown


export function useGetApiV1MessageTemplateOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1MessageTemplateOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiV1MessageTemplateOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiV1MessageTemplateOneId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiV1MessageTemplateOneIdHook>>>, TError, TData>>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetApiV1MessageTemplateOneIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiV1MessageTemplateAllHook = () => {
        const postApiV1MessageTemplateAll = useCustomInstance<MessageTemplateIEnumerableResult>();

        return useCallback((
    filterModel: FilterModel,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1MessageTemplateAll(
          {url: `/api/v1/MessageTemplate/all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterModel
    },
          options);
        }, [postApiV1MessageTemplateAll])
      }
    


export const usePostApiV1MessageTemplateAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateAllHook>>>, TError,{data: FilterModel}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1MessageTemplateAll =  usePostApiV1MessageTemplateAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateAllHook>>>, {data: FilterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1MessageTemplateAll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1MessageTemplateAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateAllHook>>>>
    export type PostApiV1MessageTemplateAllMutationBody = FilterModel
    export type PostApiV1MessageTemplateAllMutationError = unknown

    export const usePostApiV1MessageTemplateAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateAllHook>>>, TError,{data: FilterModel}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateAllHook>>>,
        TError,
        {data: FilterModel},
        TContext
      > => {

      const mutationOptions = usePostApiV1MessageTemplateAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1MessageTemplateCreateHook = () => {
        const postApiV1MessageTemplateCreate = useCustomInstance<Result>();

        return useCallback((
    messageTemplate: MessageTemplate,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1MessageTemplateCreate(
          {url: `/api/v1/MessageTemplate/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: messageTemplate
    },
          options);
        }, [postApiV1MessageTemplateCreate])
      }
    


export const usePostApiV1MessageTemplateCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateCreateHook>>>, TError,{data: MessageTemplate}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateCreateHook>>>, TError,{data: MessageTemplate}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1MessageTemplateCreate =  usePostApiV1MessageTemplateCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateCreateHook>>>, {data: MessageTemplate}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1MessageTemplateCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1MessageTemplateCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateCreateHook>>>>
    export type PostApiV1MessageTemplateCreateMutationBody = MessageTemplate
    export type PostApiV1MessageTemplateCreateMutationError = unknown

    export const usePostApiV1MessageTemplateCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateCreateHook>>>, TError,{data: MessageTemplate}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateCreateHook>>>,
        TError,
        {data: MessageTemplate},
        TContext
      > => {

      const mutationOptions = usePostApiV1MessageTemplateCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usePostApiV1MessageTemplateUpdateHook = () => {
        const postApiV1MessageTemplateUpdate = useCustomInstance<Result>();

        return useCallback((
    messageTemplate: MessageTemplate,
 options?: SecondParameter<ReturnType<typeof useCustomInstance>>,) => {
        return postApiV1MessageTemplateUpdate(
          {url: `/api/v1/MessageTemplate/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: messageTemplate
    },
          options);
        }, [postApiV1MessageTemplateUpdate])
      }
    


export const usePostApiV1MessageTemplateUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateUpdateHook>>>, TError,{data: MessageTemplate}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateUpdateHook>>>, TError,{data: MessageTemplate}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      const postApiV1MessageTemplateUpdate =  usePostApiV1MessageTemplateUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateUpdateHook>>>, {data: MessageTemplate}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1MessageTemplateUpdate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1MessageTemplateUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateUpdateHook>>>>
    export type PostApiV1MessageTemplateUpdateMutationBody = MessageTemplate
    export type PostApiV1MessageTemplateUpdateMutationError = unknown

    export const usePostApiV1MessageTemplateUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateUpdateHook>>>, TError,{data: MessageTemplate}, TContext>, request?: SecondParameter<ReturnType<typeof useCustomInstance>>}
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiV1MessageTemplateUpdateHook>>>,
        TError,
        {data: MessageTemplate},
        TContext
      > => {

      const mutationOptions = usePostApiV1MessageTemplateUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    